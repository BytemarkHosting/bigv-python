#!/usr/bin/python
#encoding: utf-8 -*-

import json
import sys

sys.path.append(".")
import bigv

DOCUMENTATION = '''
---
module: bigv-disc
version_added: "1.4.3"
short_description: Create/Delete Discs from BigV
description:
   - Create or Remove discs attached to machines in BigV.
options:
   login_username:
     description:
        - login username to authenticate to BigV
     required: true
     default: admin
   login_password:
     description:
        - Password for user to login with
     required: true
     default: 'yes'
   login_yubikey:
     description:
        - Yubikey OTP
     required: false
   vm_name:
     description:
        - Full name of the VM to operate on, e.g. host.group.account.uk0.bigv.io
    required: true
   disc_label:
     description:
        - Label for the disc
     required: true
   disc_grade:
     description:
        - Grade for the disc, must be one of 'sata', 'ssd' or 'archive'
     required: false
     default: 'sata'
   disc_size:
     description:
        - Size for the disc, in GiB, as a number eg 25
     required: false
     default: 25
   purge:
     description:
        - Whether or not to purge the disc when deleting.
     default: false
     required: false

requirements: ["bigv","requests"]
'''

EXAMPLES = '''
# Creates a disc if it doesn't exist
- bigv-disc: state: present
        login_username: alice
        login_password: test123
        vm_name: status.testing.mycompany.uk0.bigv.io
        disc_name: backups
        disc_grade: archive
        disc_size: 500
'''

def main():
    module = AnsibleModule(
        argument_spec = dict(
            login_username                  = dict(required=True),
            login_password                  = dict(required=True),
            login_yubikey                   = dict(default=None),
            vm_name                         = dict(required=True),
            disc_label                      = dict(required=True),
            disc_size                       = dict(required=False, default=25),
            disc_grade                      = dict(default='sata', choices=['sata','ssd','archive']),
            state                           = dict(default='present', choices=['absent', 'present']),
            purge                           = dict(default=False, choices=BOOLEANS)
        ),
    )

    try:
        vm_name, vm_group, vm_account, vm_location =  module.params['vm_name'].split(".", 3)
    except ValueError:
        module.fail_json(msg="vm_name must be a full BigV host name, e.g. hostname.group.account.uk0.bigv.io")

    vm_location = "https://"+vm_location

    try:
        account = bigv.BigVAccount(username=module.params['login_username'],
                              password=module.params['login_password'],
                              yubikey=module.params['login_yubikey'],
                              account=vm_account,
                              location=vm_location)
   
        group = account.group(vm_group)
        if group == None:
            module.fail_json(msg="Group " + vm_group + " doesn't exist and group_create is false")

        #
        # Workout the size of the disc
        #
        sz = module.params["disc_size"]

        if not isinstance(sz, int) or not isinstance(sz, float):
            try:
                sz = int(module.params["disc_size"])
            except ValueError:
                sz = float(module.params["disc_size"])

        #
        # Now make it an integer and turn it into MiB.
        #
        sz = int(sz * 1024)

        target = group.machine(vm_name)
    
        if target == None:
            # machine doesn't exist
            module.fail_json(msg="No such vm %s" % ngrp)
        else:
            # machine does exist
            disc = target.disc(module.params['disc_label'])
            if disc == None:
                if module.params['state'] == 'absent':
                    module.exit_json(changed=False)
                else:
                    # disc=None but state=Present
                    newdisc = target.create_disc(label=module.params['disc_label'],
                                                 grade=module.params['disc_grade'],
                                                 size=sz)
                    module.exit_json(changed=True,disc=newdisc.info())
            else:
                # disc exists
                if module.params['state'] == 'absent':
                    if module.boolean(module.params['purge']):
                        target.disc(module.params['disc_label']).purge()
                    else:
                        target.disc(module.params['disc_label']).delete()
                    module.exit_json(changed=True,msg="Deleted disc %s from %s" % (module.params['disc_label'],
                                                                                   ngrp))
                else:
                    # is it the same size/grade?
    
                    module.exit_json(changed=False, disc=disc.info())

        module.fail_json(msg="Shouldn't reach here")

    except bigv.BigVProblem as e:
         module.fail_json(msg=e.msg, http_status=e.http_status, http_method=e.http_method, url=e.url)
    
from ansible.module_utils.basic import *
main()
