#!/usr/bin/python
#encoding: utf-8 -*-

import json
import time
import sys

sys.path.append(".")
import bigv

DOCUMENTATION = '''
---
module: bigv-vm
version_added: "1.4.3"
short_description: Create/Delete VMs from BigV
description:
   - Create or Remove virtual machines from BigV.
options:
   login_username:
     description:
        - login username to authenticate to BigV
     required: true
     default: admin
   login_password:
     description:
        - Password for user to login with
     required: true
     default: 'yes'
   login_yubikey:
     description:
        - Yubikey OTP
     required: false
   vm_name:
     description:
        - Full of the VM to operate on, e.g. test.default.joebloggs.uk0.bigv.io
    required: true
   vm_distribution:
     description:
        - Operating system to image the machine with (only when creating a new machine)
     required: false
     default: 'squeeze'
   vm_cores:
     description:
        - Cores to provision the new machine with (as a string, like the CLI)
     required: false
     default: '1'
   vm_memory:
     description:
        - GB Memory to provision the new machine with (as a string, like the CLI)
     required: false
     default: '1'
   vm_discs:
     description:
        - Discs to provision the new machine with (as a string, like the CLI)
     required: false
     default: 'sata:25GB'
   vm_rdns:
     description:
        - RDNS record for the Virtual Machine's primary IPv6 and IPv4 addresses
   vm_root_password:
     required: true
     description:
       - Root password for the created VM
   vm_zone:
     required: false
     default: None
     description:
        - Zone to deploy the VM in
   purge:
     description:
        - Whether or not to purge the disc when deleting.
     default: false
     required: false

reguirements: ["bigv","requests"]
'''

EXAMPLES = '''
# Creates a new VM
- bigv-vm: state: present
        login_username: alice
        login_password: test123
        vm_name: status.default.foo.uk0.bigv.io
        vm_rdns: 
'''

def main():
    module = AnsibleModule(
        argument_spec = dict(
            login_username                  = dict(required=True),
            login_password                  = dict(required=True),
            login_yubikey                   = dict(default=None),
            vm_name                         = dict(required=True),
            vm_distribution                 = dict(default='wheezy'),
            vm_cores                        = dict(default=1),
            vm_memory                       = dict(default=1),
            vm_discs                        = dict(default='sata:25'),
            vm_root_password                = dict(required=True),
            vm_rdns                         = dict(default=None),
            vm_zone                         = dict(default=None),
            wait                            = dict(default='yes', choices=['yes', 'no']),
            group_create                    = dict(default='no', choices=['yes', 'no']),
            purge                           = dict(default=False, choices=BOOLEANS),
            state                           = dict(default='present', choices=['absent', 'present', 'running', 'stopped'])
        ),
    )

    try:
        vm_name, vm_group, vm_account, vm_location =  module.params['vm_name'].split(".", 3)
    except ValueError:
        module.fail_json(msg="vm_name must be a full BigV host name, e.g. hostname.group.account.uk0.bigv.io")

    vm_location = "https://"+vm_location

    try:    
        account = bigv.BigVAccount(username=module.params['login_username'],
                          password=module.params['login_password'],
                          yubikey=module.params['login_yubikey'],
                          account=vm_account,
                          location=vm_location)

        group = account.group(vm_group)

        if group == None:
            if module.params["group_create"]:
                group = account.create_group(vm_group)
            else:
                module.fail_json(msg="Group " + vm_group + " doesn't exist and group_create is false")

        target = group.machine(vm_name)

        if target == None:
            # machine doesn't exist
            if module.params['state'] == "absent":
                module.exit_json(changed=False)
            else:
                machine = group.create_machine(name=vm_name,
                                                 distribution=module.params['vm_distribution'],
                                                 cores=module.params['vm_cores'],
                                                 memory=module.params['vm_memory'],
                                                 discs=module.params['vm_discs'],
                                                 zone_name=module.params['vm_zone_name'],
                                                 root_password=module.params['vm_root_password'])
                #
                # Poll to see if the machine has been switched on (wait for 5 minutes)
                #
                for i in xrange(25):
                    account.invalidate_cache()
                    target = group.machine(vm_name)
                    if target.state() == "on":
                        break

                    time.sleep(12)
                
                module.exit_json(changed=True,vm=machine.info())
        else:
            # machine does exist
            if module.params['state'] == "absent":
                target.delete(purge=module.params['purge'])
                if module.params['purge']:
                    module.exit_json(changed=True, msg="%s was PURGED FOREVER" % target.hostname())
                else:
                    module.exit_json(changed=True, msg="%s was deleted" % target.hostname())
            else:
                if target.state() == "on" and module.params['state'] == "stopped":
                    target.stop()
                    module.exit_json(changed=True, bigv_vm=target.info())
                elif target.state() == "off" and module.params['state'] == "running":
                    target.start()
                    module.exit_json(changed=True, bigv_vm=target.info())
                else:
                    # everything matches what we specified
                    module.exit_json(changed=False, bigv_vm=target.info())

        module.fail_json(msg="Shouldn't reach here")

    except bigv.BigVProblem as e:
         module.fail_json(msg=e.msg, http_status=e.http_status, http_method=e.http_method, url=e.url)


from ansible.module_utils.basic import *
main()
